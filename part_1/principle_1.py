from util.chat_util import chat

def chat_in_principle_1():
    # 确定模型
    model = "Qwen/Qwen2.5-VL-32B-Instruct"

    """
    原则一 1. 使用分隔符清晰地表示输入的不同部分
    """
    # text = f"""
    # 您应该提供尽可能清晰、具体的指示，以表达您希望模型执行的任务。\
    # 这将引导模型朝向所需的输出，并降低收到无关或不正确响应的可能性。\
    # 不要将写清晰的提示词与写简短的提示词混淆。\
    # 在许多情况下，更长的提示词可以为模型提供更多的清晰度和上下文信息，从而导致更详细和相关的输出。
    # """

    # prompt = f"""
    # 把用三个反引号括起来的文本总结成一句话。
    # ```{text}```
    # """

    """
    原则一 2. 寻求结构化的输出
    """
    # prompt = f"""
    # 请生成包括书名、作者和类别的三本虚构的、非真实存在的中文书籍清单，\
    # 并以 JSON 格式提供，其中包含以下键:book_id、title、author、genre。
    # """

    """
    原则一 3. 要求模型检查是否满足条件
    """
    # 满足条件的输入（text中提供了步骤）
    # text_1 = f"""
    # 泡一杯茶很容易。首先，需要把水烧开。\
    # 在等待期间，拿一个杯子并把茶包放进去。\
    # 一旦水足够热，就把它倒在茶包上。\
    # 等待一会儿，让茶叶浸泡。几分钟后，取出茶包。\
    # 如果您愿意，可以加一些糖或牛奶调味。\
    # 就这样，您可以享受一杯美味的茶了。
    # """

    # 不满足条件的输入（text中未提供预期指令）
    # text_2 = f"""
    # 今天阳光明媚，鸟儿在歌唱。\
    # 这是一个去公园散步的美好日子。\
    # 鲜花盛开，树枝在微风中轻轻摇曳。\
    # 人们外出享受着这美好的天气，有些人在野餐，有些人在玩游戏或者在草地上放松。\
    # 这是一个完美的日子，可以在户外度过并欣赏大自然的美景。
    # """

    # prompt = f"""
    # 您将获得由三个引号括起来的文本。\
    # 如果它包含一系列的指令，则需要按照以下格式重新编写这些指令：

    # 第一步 - ...
    # 第二步 - …
    # …
    # 第N步 - …

    # 如果文本中不包含一系列的指令，则直接写“未提供步骤”。"
    # \"\"\"{text_2}\"\"\"
    # """

    """
    原则一 4. 提供少量示例 (few shot)
    """
    prompt = f"""
    您的任务是以一致的风格回答问题。

    <孩子>: 请教我何为耐心。

    <祖父母>: 挖出最深峡谷的河流源于一处不起眼的泉眼；最宏伟的交响乐从单一的音符开始；最复杂的挂毯以一根孤独的线开始编织。

    <孩子>: 请教我何为韧性。
    """

    print(chat(model=model, prompt=prompt))

if __name__ == "__main__":
    chat_in_principle_1()